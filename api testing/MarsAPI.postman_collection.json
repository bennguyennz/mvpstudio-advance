{
	"info": {
		"_postman_id": "520c0c5f-6f2b-4689-9a33-4cd40a4bdf78",
		"name": "MarsAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21249307"
	},
	"item": [
		{
			"name": "Skills-Positive tests",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const response = pm.response.json();\r",
									"pm.collectionVariables.set(\"auth_token\", response.token.token);\r",
									"\r",
									"pm.test(\"Check Login\", function()\r",
									"{\r",
									"    pm.expect(response.isSuccess).to.eql(true);\r",
									"});\r",
									"pm.test(\"Check response code\", function()\r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check response time \r",
									"pm.test(\"Response time is below less than 500ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"//Log request headers\r",
									"console.log(request)\r",
									"console.log('request.method ' + request.method)\r",
									"console.log('request.url ' + request.url)\r",
									"\r",
									"//Request Headers validation\r",
									"pm.test(\"Verify request headers are present \", () => {\r",
									"    pm.request.to.have.header(\"Host\");\r",
									"    pm.request.to.have.header(\"Content-Length\");\r",
									"     pm.request.to.have.header(\"Connection\");\r",
									"      pm.request.to.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"//Response Headers validation\r",
									"pm.test(\"Verify response headers are present \", () => {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type value is correct\", function () {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    pm.response.to.be.header(\"Server\", \"Kestrel\");\r",
									"     pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});\r",
									"\r",
									"//Schema validation\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"isSuccess\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"token\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"token\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"expires\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"token\",\r",
									"        \"expires\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"isSuccess\",\r",
									"    \"token\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rememberMe\": false,\r\n    \"email\": \"binhnguyen130320@gmail.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60968/authentication/authentication/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60968",
							"path": [
								"authentication",
								"authentication",
								"signin"
							],
							"query": [
								{
									"key": "type",
									"value": "Sign In",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"console.log(jsonData.id);\r",
									"pm.collectionVariables.set(\"skillId\", jsonData.id);\r",
									"//Check response code\r",
									"pm.test(\"Status code check\", function()\r",
									"{\r",
									"    pm.response.to.have.status(200); \r",
									"});\r",
									"\r",
									"//Check response messgae\r",
									"pm.test(\"Message check\", function()\r",
									"{\r",
									"    pm.expect(jsonData.success).to.be.eql(true);   \r",
									"});\r",
									"\r",
									"//Check response time \r",
									"pm.test(\"Response time is below less than 500ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//log request headers\r",
									"console.log(request)\r",
									"console.log('request.method ' + request.method)\r",
									"console.log('request.url ' + request.url)\r",
									"\r",
									"//Request Headers validation\r",
									"pm.test(\"Verify request headers are present \", () => {\r",
									"    pm.request.to.have.header(\"Host\");\r",
									"    pm.request.to.have.header(\"Content-Length\");\r",
									"     pm.request.to.have.header(\"Connection\");\r",
									"      pm.request.to.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"//Response Headers validation\r",
									"pm.test(\"Verify response headers are present \", () => {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type value is correct\", function () {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    pm.response.to.be.header(\"Server\", \"Kestrel\");\r",
									"     pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});\r",
									"\r",
									"\r",
									"//Schema validation\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"id\"\r",
									"  ]\r",
									" };\r",
									" \r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Skill\": \"{{Skills}}\",\r\n     \"ExperienceLevel\": \"{{SkillsLevel}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/profile/profile/addSkill",
							"host": [
								"{{Url}}"
							],
							"path": [
								"profile",
								"profile",
								"addSkill"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"console.log(jsonData.success);\r",
									"//success message\r",
									"pm.test(\"Check confirmation message\", function()\r",
									"{\r",
									"    pm.expect(jsonData.success).to.be.eql(true);  \r",
									"});\r",
									"\r",
									"//Status code validation\r",
									"pm.test(\"Status code check\", function()\r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check response time \r",
									"pm.test(\"Response time is below less than 500ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//log request headers\r",
									"console.log(request)\r",
									"console.log('request.method ' + request.method)\r",
									"console.log('request.url ' + request.url)\r",
									"\r",
									"//Request Headers validation\r",
									"pm.test(\"Verify request headers are present \", () => {\r",
									"    pm.request.to.have.header(\"Host\");\r",
									"    pm.request.to.have.header(\"Content-Length\");\r",
									"     pm.request.to.have.header(\"Connection\");\r",
									"      pm.request.to.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"//Response Headers validation\r",
									"pm.test(\"Verify response headers are present \", () => {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type value is correct\", function () {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    pm.response.to.be.header(\"Server\", \"Kestrel\");\r",
									"     pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});\r",
									"\r",
									"\r",
									"//Schema validation\r",
									"const schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"id\"\r",
									"  ]\r",
									"};\r",
									" \r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"PersonSkillId\": \"{{skillId}}\",\r\n    \"Skill\": \"{{NewSkills}}\",\r\n    \"ExperienceLevel\": \"{{NewSkillsLevel}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/profile/profile/updateSkill",
							"host": [
								"{{Url}}"
							],
							"path": [
								"profile",
								"profile",
								"updateSkill"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const Test = \"iteration\"\r",
									"var skill = \"\";\r",
									"if(Test != \"iteration\")\r",
									"{\r",
									"    skill = pm.collectionVariables.get(\"NewSkills\");\r",
									"}\r",
									"else\r",
									"{\r",
									"    skill = pm.iterationData.get(\"NewSkills\");  \r",
									"}\r",
									"var arraySkl = pm.collectionVariables.get(\"expSkl\");\r",
									"arraySkl.push(skill);\r",
									"pm.collectionVariables.set(\"expSkl\", arraySkl);\r",
									"var expSkills = pm.collectionVariables.get(\"expSkl\");\r",
									"console.log(expSkills);\r",
									"\r",
									"//Actual skill\r",
									"const jsonObject = pm.response.json();\r",
									"var actSkills = pm.collectionVariables.get(\"actSkl\");\r",
									"jsonObject.map(jsonObject => actSkills.push(jsonObject.skill));\r",
									"pm.collectionVariables.set(\"actSkl\", actSkills);\r",
									"var actSkills = pm.collectionVariables.get(\"actSkl\");\r",
									"console.log(actSkills);\r",
									"\r",
									"pm.test(\"Skills check\", function()\r",
									"{\r",
									"  pm.expect(expSkills).to.be.eql(actSkills);\r",
									"});\r",
									"//Validate status code \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check response time \r",
									"pm.test(\"Response time is below less than 500ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Log request headers\r",
									"console.log(request)\r",
									"console.log('request.method ' + request.method)\r",
									"console.log('request.url ' + request.url)\r",
									"\r",
									"//Request Headers validation\r",
									"pm.test(\"Verify request headers are present \", () => {\r",
									"    pm.request.to.have.header(\"Host\");\r",
									"     pm.request.to.have.header(\"Connection\");\r",
									"      pm.request.to.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"//Response Headers validation\r",
									"pm.test(\"Verify response headers are present \", () => {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type value is correct\", function () {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    pm.response.to.be.header(\"Server\", \"Kestrel\");\r",
									"     pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});\r",
									"\r",
									"\r",
									"//Schema validation\r",
									"const schema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"personSkillId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"skill\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"experienceLevel\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"personSkillId\",\r",
									"        \"skill\",\r",
									"        \"experienceLevel\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"};\r",
									" \r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.collectionVariables.get(\"expSkl\")==\"\"||pm.collectionVariables.get(\"expSkl\")== \"SpecFlow,Nunit,DDD,POM\")\r",
									"{   \r",
									"    pm.collectionVariables.set(\"expSkl\", []);\r",
									"}\r",
									"\r",
									"if(pm.collectionVariables.get(\"actSkl\")==\"\"||pm.collectionVariables.get(\"actSkl\")== \"SpecFlow,Nunit,DDD,POM\")\r",
									"{   \r",
									"    pm.collectionVariables.set(\"actSkl\", []);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/profile/profile/getSkill",
							"host": [
								"{{Url}}"
							],
							"path": [
								"profile",
								"profile",
								"getSkill"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"//validate response message\r",
									"pm.test(\"Check delete message\", function()\r",
									"{\r",
									"    pm.expect(jsonData.success).to.be.eql(true);\r",
									"});\r",
									"\r",
									"//validate response code\r",
									"pm.test(\"Check reponse code\", function()\r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate deleted skills\r",
									"pm.test(\"Validate deleted Skills\", function()\r",
									"{\r",
									"    pm.expect(jsonData.skill).to.be.eql(pm.iterationData.get(\"NewSkills\"));\r",
									"});\r",
									"\r",
									"//Check response time \r",
									"pm.test(\"Response time is below less than 500ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Log request headers\r",
									"console.log(request)\r",
									"console.log('request.method ' + request.method)\r",
									"console.log('request.url ' + request.url)\r",
									"\r",
									"//Request Headers validation\r",
									"pm.test(\"Verify request headers are present \", () => {\r",
									"    pm.request.to.have.header(\"Host\");\r",
									"    pm.request.to.have.header(\"Content-Length\");\r",
									"     pm.request.to.have.header(\"Connection\");\r",
									"      pm.request.to.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"//Response Headers validation\r",
									"pm.test(\"Verify response headers are present \", () => {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"     pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type value is correct\", function () {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    pm.response.to.be.header(\"Server\", \"Kestrel\");\r",
									"     pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});\r",
									"\r",
									"//Schema validation\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"skill\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"skill\"\r",
									"  ]\r",
									"};\r",
									" pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"PersonSkillId\": \"{{skillId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/profile/profile/deleteSkill",
							"host": [
								"{{Url}}"
							],
							"path": [
								"profile",
								"profile",
								"deleteSkill"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Skills  Nagetive tests",
			"item": [
				{
					"name": "login Unsuccessful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const response = pm.response.json();\r",
									"//pm.collectionVariables.set(\"auth_token\", response.token.token);\r",
									"//Validate response message \r",
									"pm.test(\"Check Login with null userName\", function()\r",
									"{\r",
									"    pm.expect(response.isSuccess).to.eql(false);\r",
									"});\r",
									"\r",
									"//validate response code\r",
									"pm.test(\"Check response code\", function()\r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check response time \r",
									"pm.test(\"Response time is below less than 500ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"//log request headers\r",
									"console.log(request)\r",
									"console.log('request.method ' + request.method)\r",
									"console.log('request.url ' + request.url)\r",
									"\r",
									"pm.test(\"Verify request headers are present \", () => {\r",
									"    pm.request.to.have.header(\"Host\");\r",
									"    pm.request.to.have.header(\"Content-Length\");\r",
									"     pm.request.to.have.header(\"Connection\");\r",
									"      pm.request.to.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"//Headers validation\r",
									"pm.test(\"Verify response headers are present \", () => {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type value is correct\", function () {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    pm.response.to.be.header(\"Server\", \"Kestrel\");\r",
									"     pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});\r",
									"\r",
									"//Schema validation\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"isSuccess\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"isSuccess\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rememberMe\": false,\r\n    \"email\": \"\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60968/authentication/authentication/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60968",
							"path": [
								"authentication",
								"authentication",
								"signin"
							],
							"query": [
								{
									"key": "type",
									"value": "Sign In",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "login Unsuccessful with wrong Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const response = pm.response.json();\r",
									"//pm.collectionVariables.set(\"auth_token\", response.token.token);\r",
									"//Validate response message \r",
									"pm.test(\"Check Login with null userName\", function()\r",
									"{\r",
									"    pm.expect(response.isSuccess).to.eql(false);\r",
									"});\r",
									"\r",
									"//validate response code\r",
									"pm.test(\"Check response code\", function()\r",
									"{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check response time \r",
									"pm.test(\"Response time is below less than 500ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"//log request headers\r",
									"console.log(request)\r",
									"console.log('request.method ' + request.method)\r",
									"console.log('request.url ' + request.url)\r",
									"\r",
									"pm.test(\"Verify request headers are present \", () => {\r",
									"    pm.request.to.have.header(\"Host\");\r",
									"    pm.request.to.have.header(\"Content-Length\");\r",
									"     pm.request.to.have.header(\"Connection\");\r",
									"      pm.request.to.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"//Headers validation\r",
									"pm.test(\"Verify response headers are present \", () => {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type value is correct\", function () {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    pm.response.to.be.header(\"Server\", \"Kestrel\");\r",
									"     pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"});\r",
									"\r",
									"//Schema validation\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"isSuccess\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"isSuccess\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rememberMe\": false,\r\n    \"email\": \"bi@gmail.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60968/authentication/authentication/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60968",
							"path": [
								"authentication",
								"authentication",
								"signin"
							],
							"query": [
								{
									"key": "type",
									"value": "Sign In",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Skills -without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//Status code validation\r",
									"pm.test(\"Status code check\", function()\r",
									"{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"//Check response time \r",
									"pm.test(\"Response time is below less than 500ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//log request headers\r",
									"console.log(request)\r",
									"console.log('request.method ' + request.method)\r",
									"console.log('request.url ' + request.url)\r",
									"\r",
									"\r",
									"//Request Headers validation\r",
									"pm.test(\"Verify request headers are present \", () => {\r",
									"    pm.request.to.have.header(\"Host\");\r",
									"    pm.request.to.have.header(\"Content-Length\");\r",
									"     pm.request.to.have.header(\"Connection\");\r",
									"      pm.request.to.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"//Response Headers validation\r",
									"pm.test(\"Verify response headers are present \", () => {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"WWW-Authenticate\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type value is correct\", function () {\r",
									"   pm.expect(pm.response.headers.get('Content-Length')).to.eql('0');\r",
									"    pm.response.to.be.header(\"Server\", \"Kestrel\");\r",
									"     pm.expect(pm.response.headers.get('WWW-Authenticate')).to.eql('Bearer');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"PersonSkillId\": \"{{skillId}}\",\r\n    \"Skill\": \"{{NewSkills}}\",\r\n    \"ExperienceLevel\": \"{{NewSkillsLevel}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/profile/profile/updateSkill",
							"host": [
								"{{Url}}"
							],
							"path": [
								"profile",
								"profile",
								"updateSkill"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Skills  with Invalid URI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Check reponse code\", function()\r",
									"{\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"//Check response time \r",
									"pm.test(\"Response time is below less than 500ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//log request headers\r",
									"console.log(request)\r",
									"console.log('request.method ' + request.method)\r",
									"console.log('request.url ' + request.url)\r",
									"\r",
									"//Request Headers validation\r",
									"pm.test(\"Verify request headers are present \", () => {\r",
									"    pm.request.to.have.header(\"Host\");\r",
									"    pm.request.to.have.header(\"Content-Length\");\r",
									"     pm.request.to.have.header(\"Connection\");\r",
									"      pm.request.to.have.header(\"Postman-Token\");\r",
									"});\r",
									"\r",
									"//Response Headers validation\r",
									"pm.test(\"Verify response headers are present \", () => {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type value is correct\", function () {\r",
									"   pm.expect(pm.response.headers.get('Content-Length')).to.eql('0');\r",
									"    pm.response.to.be.header(\"Server\", \"Kestrel\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"PersonSkillId\": \"{{skillId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Url}}/profile/profile/delete",
							"host": [
								"{{Url}}"
							],
							"path": [
								"profile",
								"profile",
								"delete"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "auth_token",
			"value": ""
		},
		{
			"key": "Url",
			"value": "http://localhost:60190",
			"type": "string"
		},
		{
			"key": "skillId",
			"value": ""
		},
		{
			"key": "Skills",
			"value": "JavaScript",
			"type": "string"
		},
		{
			"key": "SkillsLevel",
			"value": "Basic",
			"type": "string"
		},
		{
			"key": "NewSkills",
			"value": "C#",
			"type": "string"
		},
		{
			"key": "NewSkillsLevel",
			"value": "Intermediate",
			"type": "string"
		},
		{
			"key": "expSkl",
			"value": ""
		},
		{
			"key": "actSkl",
			"value": "",
			"type": "string"
		}
	]
}