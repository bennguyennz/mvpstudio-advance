{
	"info": {
		"_postman_id": "2e1308ff-c767-4ffe-9013-6ce3083f1fe3",
		"name": "dog.ceoAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21249307"
	},
	"item": [
		{
			"name": "get all dogs list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Check key-value pairs in the response\", function () {\r",
							"   //name check\r",
							"    pm.expect(jsonData.message.cattledog).to.eql([\"australian\"]);\r",
							"    pm.expect(jsonData.message.springer).to.eql([\"english\"]);\r",
							"    pm.expect(jsonData.message.hound).to.eql([\"afghan\",\"basset\",\"blood\",\"english\",\"ibizan\",\"plott\",\"walker\"]);\r",
							"     pm.expect(Object.keys(pm.response.json()).length).to.eql(2);\r",
							"});\r",
							"pm.test(\"Check status\", function () {\r",
							"    //status check\r",
							"     pm.expect(jsonData.status).to.eql(\"success\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dog.ceo/api/breeds/list/all",
					"protocol": "https",
					"host": [
						"dog",
						"ceo"
					],
					"path": [
						"api",
						"breeds",
						"list",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Random image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var json = pm.response.json();\r",
							"\r",
							"pm.test(\"message response check\", function()\r",
							"{\r",
							"    pm.expect(json.message).contains(\".jpg\");\r",
							"     pm.expect(Object.keys(pm.response.json()).length).to.eql(2);\r",
							"});\r",
							"\r",
							"console.log(pm.response);\r",
							"\r",
							"pm.test(\"Check status\", function () {\r",
							"\r",
							"    //status check\r",
							"     pm.expect(json.status).to.eql(\"success\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://dog.ceo/api/breeds/image/random",
					"protocol": "https",
					"host": [
						"dog",
						"ceo"
					],
					"path": [
						"api",
						"breeds",
						"image",
						"random"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get By bread image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Load response into object\r",
							"const json = pm.response.json();\r",
							"\r",
							"// Test HTTP status code\r",
							"pm.test(\"Check if HTTP status code is 200\", () => {\r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check key-value pair in the response\", function () {\r",
							"   //status check\r",
							"    pm.expect(json.message).to.be.an(\"array\");\r",
							"    pm.expect(Object.keys(pm.response.json()).length).to.eql(2);\r",
							"   \r",
							"});\r",
							"pm.test(\"Check status\", function () {\r",
							"    //status check\r",
							"     pm.expect(json.status).to.eql(\"success\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dog.ceo/api/breed/frise/images",
					"protocol": "https",
					"host": [
						"dog",
						"ceo"
					],
					"path": [
						"api",
						"breed",
						"frise",
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all subBreeds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check key-value pairs in the response\", function () {\r",
							"\r",
							"     pm.expect(jsonData.message).to.eql([\"american\",\"australian\",\"bedlington\",\"border\",\"cairn\",\"dandie\",\"fox\",\"irish\",\"kerryblue\",\"lakeland\",\"norfolk\",\"norwich\",\"patterdale\",\"russell\",\"scottish\",\"sealyham\",\"silky\",\r",
							"        \"tibetan\",\"toy\",\"welsh\",\"westhighland\",\"wheaten\",\"yorkshire\"]);\r",
							"      pm.expect(Object.keys(pm.response.json()).length).to.eql(2);\r",
							"      pm.expect(jsonData.message).to.be.an(\"array\"); \r",
							"});\r",
							"pm.test(\"Check status\", function () {\r",
							"    //status check\r",
							"     pm.expect(jsonData.status).to.eql(\"success\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dog.ceo/api/breed/terrier/list",
					"protocol": "https",
					"host": [
						"dog",
						"ceo"
					],
					"path": [
						"api",
						"breed",
						"terrier",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "Random subBread image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var json = pm.response.json();\r",
							"\r",
							"pm.test(\"message response check\", function()\r",
							"{\r",
							"    pm.expect(json.message).contains(\".jpg\");\r",
							"     pm.expect(Object.keys(pm.response.json()).length).to.eql(2);  \r",
							"});\r",
							"\r",
							"console.log(pm.response);\r",
							"\r",
							"pm.test(\"Check key-value pairs in the response\", function () {\r",
							"\r",
							"    //status check\r",
							"     pm.expect(json.status).to.eql(\"success\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dog.ceo/api/breed/collie/images/random",
					"protocol": "https",
					"host": [
						"dog",
						"ceo"
					],
					"path": [
						"api",
						"breed",
						"collie",
						"images",
						"random"
					]
				}
			},
			"response": []
		},
		{
			"name": "browse breeds list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var json = pm.response.json();\r",
							"\r",
							"pm.test(\"message response check\", function()\r",
							"{\r",
							"    pm.expect(json.message).contains(\".jpg\");\r",
							"    pm.expect(Object.keys(pm.response.json()).length).to.eql(2);\r",
							"});\r",
							"\r",
							"console.log(pm.response);\r",
							"\r",
							"pm.test(\"Check key-value pairs in the response\", function () {\r",
							"\r",
							"    //status check\r",
							"     pm.expect(json.status).to.eql(\"success\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dog.ceo/api/breed/cattledog/images/random",
					"protocol": "https",
					"host": [
						"dog",
						"ceo"
					],
					"path": [
						"api",
						"breed",
						"cattledog",
						"images",
						"random"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "random_image",
			"value": ""
		},
		{
			"key": "random_subBread",
			"value": "",
			"type": "string"
		},
		{
			"key": "random_subBreadImage",
			"value": "",
			"type": "string"
		}
	]
}