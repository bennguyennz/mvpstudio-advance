{
	"info": {
		"_postman_id": "2e1308ff-c767-4ffe-9013-6ce3083f1fe3",
		"name": "dog.ceoAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21249307"
	},
	"item": [
		{
			"name": "Positive tests",
			"item": [
				{
					"name": "get all dogs list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Load response into object\r",
									"const json = pm.response.json();\r",
									"\r",
									"// Test HTTP status code\r",
									"pm.test(\"Check if HTTP status code is 200\", () => {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check key value pairs in the response\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Check key-value pairs in the response\", function () {\r",
									" //name check\r",
									"  pm.expect(jsonData.message.cattledog).to.eql([\"australian\"]);\r",
									"  pm.expect(jsonData.message.springer).to.eql([\"english\"]);\r",
									"  pm.expect(Object.keys(pm.response.json()).length).to.eql(2);\r",
									"});\r",
									"\r",
									"//status check\t\t\t\t\t\t\t\r",
									"pm.test(\"Check status\", function () {\r",
									" pm.expect(jsonData.status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"//Check response time \r",
									"pm.test(\"Response time is below less than 1 Second\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//log headers into console\r",
									"console.log(pm.response);\r",
									"console.log(request)\r",
									"console.log('request.method ' + request.method)\r",
									"console.log('request.url ' + request.url)\r",
									"\r",
									"//Headers validation\r",
									"pm.test(\"Verify response headers are present \", () => {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type value is correct\", function () {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.response.to.be.header(\"Server\", \"cloudflare\");\r",
									"     pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"          pm.expect(pm.response.headers.get('X-Powered-By')).to.eql('PHP/8.1.0');\r",
									"});\r",
									"\r",
									"//Schema validation\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"affenpinscher\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"african\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"airedale\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"akita\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"appenzeller\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"australian\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"basenji\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"beagle\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"bluetick\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"borzoi\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"bouvier\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"boxer\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"brabancon\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"briard\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"buhund\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"bulldog\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"bullterrier\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"cattledog\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"chihuahua\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"chow\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"clumber\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"cockapoo\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"collie\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"coonhound\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"corgi\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"cotondetulear\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"dachshund\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"dalmatian\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"dane\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"deerhound\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"dhole\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"dingo\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"doberman\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"elkhound\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"entlebucher\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"eskimo\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"finnish\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"frise\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"germanshepherd\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"golden\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"greyhound\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"groenendael\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"havanese\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"hound\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"husky\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"keeshond\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"kelpie\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"komondor\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"kuvasz\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"labradoodle\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"labrador\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"leonberg\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"lhasa\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"malamute\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"malinois\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"maltese\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"mastiff\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"mexicanhairless\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"mix\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"mountain\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"newfoundland\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"otterhound\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"ovcharka\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"papillon\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"pekinese\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"pembroke\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"pinscher\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"pitbull\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"pointer\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"pomeranian\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"poodle\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"pug\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"puggle\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"pyrenees\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"redbone\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"retriever\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"ridgeback\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"rottweiler\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"saluki\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"samoyed\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"schipperke\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"schnauzer\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"segugio\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"setter\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"sharpei\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"sheepdog\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"shiba\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"shihtzu\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"spaniel\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"springer\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"stbernard\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"terrier\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"tervuren\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"vizsla\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"waterdog\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"weimaraner\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"whippet\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"wolfhound\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"affenpinscher\",\r",
									"        \"african\",\r",
									"        \"airedale\",\r",
									"        \"akita\",\r",
									"        \"appenzeller\",\r",
									"        \"australian\",\r",
									"        \"basenji\",\r",
									"        \"beagle\",\r",
									"        \"bluetick\",\r",
									"        \"borzoi\",\r",
									"        \"bouvier\",\r",
									"        \"boxer\",\r",
									"        \"brabancon\",\r",
									"        \"briard\",\r",
									"        \"buhund\",\r",
									"        \"bulldog\",\r",
									"        \"bullterrier\",\r",
									"        \"cattledog\",\r",
									"        \"chihuahua\",\r",
									"        \"chow\",\r",
									"        \"clumber\",\r",
									"        \"cockapoo\",\r",
									"        \"collie\",\r",
									"        \"coonhound\",\r",
									"        \"corgi\",\r",
									"        \"cotondetulear\",\r",
									"        \"dachshund\",\r",
									"        \"dalmatian\",\r",
									"        \"dane\",\r",
									"        \"deerhound\",\r",
									"        \"dhole\",\r",
									"        \"dingo\",\r",
									"        \"doberman\",\r",
									"        \"elkhound\",\r",
									"        \"entlebucher\",\r",
									"        \"eskimo\",\r",
									"        \"finnish\",\r",
									"        \"frise\",\r",
									"        \"germanshepherd\",\r",
									"        \"golden\",\r",
									"        \"greyhound\",\r",
									"        \"groenendael\",\r",
									"        \"havanese\",\r",
									"        \"hound\",\r",
									"        \"husky\",\r",
									"        \"keeshond\",\r",
									"        \"kelpie\",\r",
									"        \"komondor\",\r",
									"        \"kuvasz\",\r",
									"        \"labradoodle\",\r",
									"        \"labrador\",\r",
									"        \"leonberg\",\r",
									"        \"lhasa\",\r",
									"        \"malamute\",\r",
									"        \"malinois\",\r",
									"        \"maltese\",\r",
									"        \"mastiff\",\r",
									"        \"mexicanhairless\",\r",
									"        \"mix\",\r",
									"        \"mountain\",\r",
									"        \"newfoundland\",\r",
									"        \"otterhound\",\r",
									"        \"ovcharka\",\r",
									"        \"papillon\",\r",
									"        \"pekinese\",\r",
									"        \"pembroke\",\r",
									"        \"pinscher\",\r",
									"        \"pitbull\",\r",
									"        \"pointer\",\r",
									"        \"pomeranian\",\r",
									"        \"poodle\",\r",
									"        \"pug\",\r",
									"        \"puggle\",\r",
									"        \"pyrenees\",\r",
									"        \"redbone\",\r",
									"        \"retriever\",\r",
									"        \"ridgeback\",\r",
									"        \"rottweiler\",\r",
									"        \"saluki\",\r",
									"        \"samoyed\",\r",
									"        \"schipperke\",\r",
									"        \"schnauzer\",\r",
									"        \"segugio\",\r",
									"        \"setter\",\r",
									"        \"sharpei\",\r",
									"        \"sheepdog\",\r",
									"        \"shiba\",\r",
									"        \"shihtzu\",\r",
									"        \"spaniel\",\r",
									"        \"springer\",\r",
									"        \"stbernard\",\r",
									"        \"terrier\",\r",
									"        \"tervuren\",\r",
									"        \"vizsla\",\r",
									"        \"waterdog\",\r",
									"        \"weimaraner\",\r",
									"        \"whippet\",\r",
									"        \"wolfhound\"\r",
									"      ]\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"status\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/breeds/list/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"breeds",
								"list",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Random image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate response code\r",
									"pm.test(\"Status code check\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var json = pm.response.json();\r",
									"\r",
									"\r",
									"//status check\r",
									"pm.test(\"Check status\", function () {\r",
									"     pm.expect(json.status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"message response check\", function()\r",
									"{\r",
									"    pm.expect(json.message).contains(\".jpg\");\r",
									"     pm.expect(Object.keys(pm.response.json()).length).to.eql(2);\r",
									"});\r",
									"\r",
									"//Check response time \r",
									"pm.test(\"Response time is below less than 500ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//log headers into console\r",
									"console.log(pm.response);\r",
									"console.log(request)\r",
									"console.log('request.method ' + request.method)\r",
									"console.log('request.url ' + request.url)\r",
									"\r",
									"//Headers validation\r",
									"pm.test(\"Verify response headers are present \", () => {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type value is correct\", function () {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.response.to.be.header(\"Server\", \"cloudflare\");\r",
									"     pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"          pm.expect(pm.response.headers.get('X-Powered-By')).to.eql('PHP/8.1.0');\r",
									"});\r",
									"\r",
									"//Schema validation\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"status\"\r",
									"  ]\r",
									"};\r",
									" \r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/breeds/image/random",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"breeds",
								"image",
								"random"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get By bread image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Load response into object\r",
									"const json = pm.response.json();\r",
									"\r",
									"// Test HTTP status code\r",
									"pm.test(\"Check if HTTP status code is 200\", () => {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check key value pairs in the response\r",
									"pm.test(\"Check key-value pair in the response\", function () {\r",
									"    pm.expect(json.message).to.be.an(\"array\");\r",
									"    pm.expect(Object.keys(pm.response.json()).length).to.eql(2);   \r",
									"});\r",
									"\r",
									"//Check response status\r",
									"pm.test(\"Check status\", function () {\r",
									"     pm.expect(json.status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"//Check response time \r",
									"pm.test(\"Response time is below less than 500ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//log headers into console\r",
									"console.log(pm.response);\r",
									"console.log(request)\r",
									"console.log('request.method ' + request.method)\r",
									"console.log('request.url ' + request.url)\r",
									"\r",
									"//Headers validation\r",
									"pm.test(\"Verify response headers are present \", () => {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type value is correct\", function () {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.response.to.be.header(\"Server\", \"cloudflare\");\r",
									"     pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"          pm.expect(pm.response.headers.get('X-Powered-By')).to.eql('PHP/8.1.0');\r",
									"});\r",
									"\r",
									"//Schema validation\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"status\"\r",
									"  ]\r",
									"};\r",
									" pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/breed/frise/images",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"breed",
								"frise",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all subBreeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Check response code\r",
									"pm.test(\"Status code check\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check response key value pairs\r",
									"pm.test(\"Check key-value pairs in the response\", function () {\r",
									"\r",
									"     pm.expect(jsonData.message).to.eql([\"american\",\"australian\",\"bedlington\",\"border\",\"cairn\",\"dandie\",\"fox\",\"irish\",\"kerryblue\",\"lakeland\",\"norfolk\",\"norwich\",\"patterdale\",\"russell\",\"scottish\",\"sealyham\",\"silky\",\r",
									"        \"tibetan\",\"toy\",\"welsh\",\"westhighland\",\"wheaten\",\"yorkshire\"]);\r",
									"      pm.expect(Object.keys(pm.response.json()).length).to.eql(2);\r",
									"      pm.expect(jsonData.message).to.be.an(\"array\"); \r",
									"});\r",
									"\r",
									"//Check response status\r",
									"pm.test(\"Check status\", function () {\r",
									"     pm.expect(jsonData.status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"//Check response time \r",
									"pm.test(\"Response time is below less than 500ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//log headers into console\r",
									"console.log(pm.response);\r",
									"console.log(request)\r",
									"console.log('request.method ' + request.method)\r",
									"console.log('request.url ' + request.url)\r",
									"\r",
									"//Headers validation\r",
									"pm.test(\"Verify response headers are present \", () => {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type value is correct\", function () {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.response.to.be.header(\"Server\", \"cloudflare\");\r",
									"     pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"          pm.expect(pm.response.headers.get('X-Powered-By')).to.eql('PHP/8.1.0');\r",
									"});\r",
									"\r",
									"//Schema validation\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"status\"\r",
									"  ]\r",
									"};\r",
									" \r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/breed/terrier/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"breed",
								"terrier",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Random subBread image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//Check response code\r",
									"pm.test(\"Status code check\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var json = pm.response.json();\r",
									"//Check response message\r",
									"pm.test(\"message response check\", function()\r",
									"{\r",
									"    pm.expect(json.message).contains(\".jpg\");\r",
									"     pm.expect(Object.keys(pm.response.json()).length).to.eql(2);  \r",
									"});\r",
									"\r",
									"//Log headers into console\r",
									"console.log(pm.response);\r",
									"console.log(request)\r",
									"console.log('request.method ' + request.method)\r",
									"console.log('request.url ' + request.url)\r",
									"\r",
									"//Check key value pairs\r",
									"pm.test(\"Check key-value pairs in the response\", function () {\r",
									"\r",
									"    //status check\r",
									"     pm.expect(json.status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"//Check response time \r",
									"pm.test(\"Response time is below less than 500ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Headers validation\r",
									"pm.test(\"Verify response headers are present \", () => {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type value is correct\", function () {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.response.to.be.header(\"Server\", \"cloudflare\");\r",
									"     pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"          pm.expect(pm.response.headers.get('X-Powered-By')).to.eql('PHP/8.1.0');\r",
									"});\r",
									"\r",
									"//Schema validation\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"status\"\r",
									"  ]\r",
									"};\r",
									" \r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/breed/collie/images/random",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"breed",
								"collie",
								"images",
								"random"
							]
						}
					},
					"response": []
				},
				{
					"name": "browse breeds list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status code\r",
									"pm.test(\"Status code check\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var json = pm.response.json();\r",
									"\r",
									"//Check response values\r",
									"pm.test(\"message response check\", function()\r",
									"{\r",
									"    pm.expect(json.message).contains(\".jpg\");\r",
									"    pm.expect(Object.keys(pm.response.json()).length).to.eql(2);\r",
									"});\r",
									"\r",
									"//Log headers into console\r",
									"console.log(pm.response);\r",
									"console.log(request)\r",
									"console.log('request.method ' + request.method)\r",
									"console.log('request.url ' + request.url)\r",
									"\r",
									"//Check response key value pairs\r",
									"pm.test(\"Check key-value pairs in the response\", function () {\r",
									"     pm.expect(json.status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"//Check response time \r",
									"pm.test(\"Response time is below less than 700ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"//Headers validation\r",
									"pm.test(\"Verify response headers are present \", () => {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type value is correct\", function () {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.response.to.be.header(\"Server\", \"cloudflare\");\r",
									"     pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"          pm.expect(pm.response.headers.get('X-Powered-By')).to.eql('PHP/8.1.0');\r",
									"});\r",
									"\r",
									"//Schema validation\r",
									"const schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"status\"\r",
									"  ]\r",
									"};\r",
									" \r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/breed/cattledog/images/random",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"breed",
								"cattledog",
								"images",
								"random"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Nagetive tests",
			"item": [
				{
					"name": "get all dogs list with invalid URI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Load response into object\r",
									"const json = pm.response.json();\r",
									"\r",
									"// Test HTTP status code\r",
									"pm.test(\"Check if HTTP status code is 404\", () => {\r",
									"pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Check key value pairs in the response\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Check key-value pairs in the response\", function () {\r",
									" //Length check\r",
									"  pm.expect(Object.keys(pm.response.json()).length).to.eql(3);\r",
									"});\r",
									"\r",
									"//status check\t\t\t\t\t\t\t\r",
									"pm.test(\"Check status\", function () {\r",
									" pm.expect(jsonData.status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"//Check response time \r",
									"pm.test(\"Response time is below less than 1 Second\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//log headers into console\r",
									"console.log(pm.response);\r",
									"console.log(request)\r",
									"console.log('request.method ' + request.method)\r",
									"console.log('request.url ' + request.url)\r",
									"\r",
									"//Headers validation\r",
									"pm.test(\"Verify response headers are present \", () => {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type value is correct\", function () {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.response.to.be.header(\"Server\", \"cloudflare\");\r",
									"     pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');\r",
									"          pm.expect(pm.response.headers.get('X-Powered-By')).to.eql('PHP/8.1.0');\r",
									"});\r",
									"\r",
									"//Schema validation\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"status\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"message\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"code\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"code\",\r",
									"                \"message\",\r",
									"                \"status\"\r",
									"            ]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/breeds/list/al",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"breeds",
								"list",
								"al"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "random_image",
			"value": ""
		},
		{
			"key": "random_subBread",
			"value": "",
			"type": "string"
		},
		{
			"key": "random_subBreadImage",
			"value": "",
			"type": "string"
		},
		{
			"key": "url",
			"value": "https://dog.ceo",
			"type": "string"
		}
	]
}